#pragma once

// Standard includes
#include <functional>

// HACK: Use Boost.Tuple instead of std::tuple because at the moment, the LLVM-
// provided libc++ doesn't support the std::tuple, and Boost.Tuple is
// effectively the same thing.
// Boost includes
#include <boost/tuple/tuple.hpp>

// ROOT includes
#include <TTree.h>

// HDF5 includes
#include <hdf5.h>


namespace root2hdf5
{
    namespace tree
    {
        namespace map_hdf5
        {
            // Callback type for deallocating HDF5 types generated by
            // hdf5_type_for_tree
            typedef std::function<bool()> hdf5_type_deallocator;

            // NOTE: Before calling this method, the
            // root2hdf5::structure::struct_code_for_tree method must have been
            // called to generate a CINT-known structure for mapping data into.

            // Generates an HDF5 compound data type representing the supportable
            // branches/leaves in the tree.  This method returns a pair of the
            // form:
            //      (hdf5_type_id, hdf5_type_deallocator)
            // The deallocator must be called after use of the type is complete
            // in order to close the type and any subtypes.  In the event of
            // failure, the hdf5_type_id will be set to -1, and the deallocator
            // should be called before continuing.
            boost::tuple<hid_t, hdf5_type_deallocator>
            hdf5_type_for_tree(TTree *tree);
        }
    }
}
